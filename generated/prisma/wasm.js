
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phoneNumber: 'phoneNumber',
  contactMethod: 'contactMethod',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  tourId: 'tourId'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  order: 'order',
  isActive: 'isActive',
  isOffice: 'isOffice',
  showOnService: 'showOnService',
  showOnEurope: 'showOnEurope',
  seo: 'seo',
  slug: 'slug',
  createdAt: 'createdAt'
};

exports.Prisma.LocationAttributeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  order: 'order',
  seo: 'seo',
  locationId: 'locationId',
  createdAt: 'createdAt'
};

exports.Prisma.LocationTourScalarFieldEnum = {
  id: 'id',
  locationId: 'locationId',
  locationAttrId: 'locationAttrId',
  tourId: 'tourId',
  createdAt: 'createdAt'
};

exports.Prisma.OfficeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  contactNumber: 'contactNumber',
  email: 'email',
  logo: 'logo',
  slug: 'slug',
  currency: 'currency',
  bestTours: 'bestTours',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  thirdColor: 'thirdColor',
  bgPrimaryColor: 'bgPrimaryColor',
  bgSecondaryColor: 'bgSecondaryColor',
  primaryFont: 'primaryFont',
  socialMedia: 'socialMedia',
  seo: 'seo',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.TourScalarFieldEnum = {
  id: 'id',
  name: 'name',
  numberOfDays: 'numberOfDays',
  code: 'code',
  slug: 'slug',
  images: 'images',
  seo: 'seo',
  isActive: 'isActive',
  isTicketIncluded: 'isTicketIncluded',
  startDay: 'startDay',
  priceSingle: 'priceSingle',
  priceDouble: 'priceDouble',
  priceSingleSa: 'priceSingleSa',
  priceDoubleSa: 'priceDoubleSa',
  priceSingleJo: 'priceSingleJo',
  priceDoubleJo: 'priceDoubleJo',
  tourPrices: 'tourPrices',
  tourCountries: 'tourCountries',
  tourHotels: 'tourHotels',
  tourIncludes: 'tourIncludes',
  tourExcludes: 'tourExcludes',
  tourSections: 'tourSections',
  airpotComing: 'airpotComing',
  airpotGoing: 'airpotGoing',
  additionalInfo: 'additionalInfo',
  additionalService: 'additionalService',
  externalFile: 'externalFile',
  typeId: 'typeId',
  createdAt: 'createdAt'
};

exports.Prisma.TourTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  showOnService: 'showOnService',
  createdAt: 'createdAt',
  order: 'order'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasskeyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  publicKey: 'publicKey',
  userId: 'userId',
  credentialID: 'credentialID',
  counter: 'counter',
  deviceType: 'deviceType',
  backedUp: 'backedUp',
  transports: 'transports',
  createdAt: 'createdAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  section: 'section',
  value: 'value',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Customer: 'Customer',
  Location: 'Location',
  LocationAttribute: 'LocationAttribute',
  LocationTour: 'LocationTour',
  Office: 'Office',
  Tour: 'Tour',
  TourType: 'TourType',
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Passkey: 'Passkey',
  Setting: 'Setting'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\96279\\Desktop\\Freelance\\mundotours\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "linux-musl"
      },
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\96279\\Desktop\\Freelance\\mundotours\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"../generated/prisma\"\n  binaryTargets = [\"native\", \"linux-musl\", \"rhel-openssl-3.0.x\"]\n}\n\nmodel Customer {\n  id            Int      @id @default(autoincrement())\n  name          String\n  phoneNumber   String   @map(\"phone_number\")\n  contactMethod String   @map(\"contact_method\")\n  status        Int\n  notes         String?\n  createdAt     DateTime @default(now()) @map(\"created_at\")\n  tourId        Int?     @map(\"tour_id\")\n  tour          Tour?    @relation(fields: [tourId], references: [id])\n\n  @@map(\"customer\")\n}\n\nmodel Location {\n  id            Int                 @id @default(autoincrement())\n  name          String\n  image         Json?\n  order         Int                 @default(1)\n  isActive      Boolean?            @map(\"is_active\")\n  isOffice      Boolean?            @map(\"is_office\")\n  showOnService Boolean             @default(true) @map(\"show_on_service\")\n  showOnEurope  Boolean             @default(false) @map(\"show_on_europe\")\n  seo           Json?\n  slug          String?\n  createdAt     DateTime            @default(now()) @map(\"created_at\")\n  attributes    LocationAttribute[]\n  locationTours LocationTour[]\n\n  @@map(\"location\")\n}\n\nmodel LocationAttribute {\n  id            Int            @id @default(autoincrement())\n  title         String?\n  order         Int?\n  seo           Json?\n  locationId    Int?           @map(\"location_id\")\n  createdAt     DateTime       @default(now()) @map(\"created_at\")\n  location      Location?      @relation(fields: [locationId], references: [id], onDelete: Cascade)\n  locationTours LocationTour[]\n\n  @@map(\"location_attributes\")\n}\n\nmodel LocationTour {\n  id             Int               @id @default(autoincrement())\n  locationId     Int               @map(\"location_id\")\n  locationAttrId Int               @map(\"location_attr_id\")\n  tourId         Int               @map(\"tour_id\")\n  createdAt      DateTime          @default(now()) @map(\"created_at\")\n  location       Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)\n  locationAttr   LocationAttribute @relation(fields: [locationAttrId], references: [id], onDelete: Cascade)\n  tour           Tour              @relation(fields: [tourId], references: [id], onDelete: Cascade)\n\n  @@map(\"location_tours\")\n}\n\nmodel Office {\n  id               Int      @id @default(autoincrement())\n  name             String?\n  address          String?\n  contactNumber    String?  @map(\"contact_number\")\n  email            String?\n  logo             String?\n  slug             String?\n  currency         String\n  bestTours        Int[]    @map(\"best_tours\")\n  primaryColor     String?  @map(\"primary_color\")\n  secondaryColor   String?  @map(\"secondary_color\")\n  thirdColor       String?  @map(\"third_color\")\n  bgPrimaryColor   String?  @map(\"bg_primary_color\")\n  bgSecondaryColor String?  @map(\"bg_secondary_color\")\n  primaryFont      String?  @map(\"primary_font\")\n  socialMedia      Json[]   @default([]) @map(\"social_media\")\n  seo              Json?\n  status           Boolean?\n  createdAt        DateTime @default(now()) @map(\"created_at\")\n\n  @@map(\"office\")\n}\n\nmodel Tour {\n  id                Int            @id @default(autoincrement())\n  name              String\n  numberOfDays      Int            @map(\"number_of_days\")\n  code              String?\n  slug              String?\n  images            String[]       @default([])\n  seo               Json?\n  isActive          Boolean?       @map(\"is_active\")\n  isTicketIncluded  Boolean?       @map(\"is_ticket_included\")\n  startDay          String[]       @default([]) @map(\"start_day\")\n  priceSingle       Float?         @map(\"price_single\")\n  priceDouble       Float?         @map(\"price_double\")\n  priceSingleSa     Float?         @map(\"price_single_sa\")\n  priceDoubleSa     Float?         @map(\"price_double_sa\")\n  priceSingleJo     Float?         @map(\"price_single_jo\")\n  priceDoubleJo     Float?         @map(\"price_double_jo\")\n  tourPrices        Json[]         @map(\"tour_prices\")\n  tourCountries     String[]       @default([]) @map(\"tour_countries\")\n  tourHotels        String[]       @default([]) @map(\"tour_hotels\")\n  tourIncludes      Json[]         @default([]) @map(\"tour_includes\")\n  tourExcludes      Json[]         @default([]) @map(\"tour_excludes\")\n  tourSections      Json[]         @default([]) @map(\"tour_sections\")\n  airpotComing      String?        @map(\"airpot_coming\")\n  airpotGoing       String?        @map(\"airpot_going\")\n  additionalInfo    String?        @map(\"additional_Info\")\n  additionalService Json[]         @default([]) @map(\"additional_service\")\n  externalFile      Json?          @map(\"external_file\")\n  typeId            Int?           @map(\"type_id\")\n  createdAt         DateTime       @default(now()) @map(\"created_at\")\n  customers         Customer[]\n  tourType          TourType?      @relation(fields: [typeId], references: [id])\n  locationTours     LocationTour[]\n\n  @@map(\"tour\")\n}\n\nmodel TourType {\n  id            Int      @id @default(autoincrement())\n  name          String?\n  image         Json     @default(\"{}\")\n  showOnService Boolean  @default(true) @map(\"show_on_service\")\n  createdAt     DateTime @default(now()) @map(\"created_at\")\n  tours         Tour[]\n  order         Int      @default(1)\n\n  @@map(\"tour_type\")\n}\n\nmodel User {\n  id            String    @id @default(uuid())\n  email         String    @unique\n  name          String?\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n\n  passkeys Passkey[]\n\n  @@map(\"user\")\n}\n\nmodel Session {\n  id        String   @id\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map(\"session\")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map(\"account\")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map(\"verification\")\n}\n\nmodel Passkey {\n  id           String    @id\n  name         String?\n  publicKey    String\n  userId       String\n  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  credentialID String\n  counter      Int\n  deviceType   String\n  backedUp     Boolean\n  transports   String?\n  createdAt    DateTime?\n\n  @@map(\"passkey\")\n}\n\nmodel Setting {\n  id        Int      @id @default(autoincrement())\n  section   String   @unique\n  value     Json\n  createdBy String   @default(\"admin\")\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"setting\")\n}\n",
  "inlineSchemaHash": "b87a1d098ad90336b735659ea28077f7b4047dbfb649e1ddf0d140f0b49c2f17",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Customer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"phone_number\"},{\"name\":\"contactMethod\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"contact_method\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"tourId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"tour_id\"},{\"name\":\"tour\",\"kind\":\"object\",\"type\":\"Tour\",\"relationName\":\"CustomerToTour\"}],\"dbName\":\"customer\"},\"Location\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"isOffice\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_office\"},{\"name\":\"showOnService\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"show_on_service\"},{\"name\":\"showOnEurope\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"show_on_europe\"},{\"name\":\"seo\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"attributes\",\"kind\":\"object\",\"type\":\"LocationAttribute\",\"relationName\":\"LocationToLocationAttribute\"},{\"name\":\"locationTours\",\"kind\":\"object\",\"type\":\"LocationTour\",\"relationName\":\"LocationToLocationTour\"}],\"dbName\":\"location\"},\"LocationAttribute\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"seo\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"locationId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"location_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"location\",\"kind\":\"object\",\"type\":\"Location\",\"relationName\":\"LocationToLocationAttribute\"},{\"name\":\"locationTours\",\"kind\":\"object\",\"type\":\"LocationTour\",\"relationName\":\"LocationAttributeToLocationTour\"}],\"dbName\":\"location_attributes\"},\"LocationTour\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"locationId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"location_id\"},{\"name\":\"locationAttrId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"location_attr_id\"},{\"name\":\"tourId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"tour_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"location\",\"kind\":\"object\",\"type\":\"Location\",\"relationName\":\"LocationToLocationTour\"},{\"name\":\"locationAttr\",\"kind\":\"object\",\"type\":\"LocationAttribute\",\"relationName\":\"LocationAttributeToLocationTour\"},{\"name\":\"tour\",\"kind\":\"object\",\"type\":\"Tour\",\"relationName\":\"LocationTourToTour\"}],\"dbName\":\"location_tours\"},\"Office\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactNumber\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"contact_number\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bestTours\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"best_tours\"},{\"name\":\"primaryColor\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"primary_color\"},{\"name\":\"secondaryColor\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"secondary_color\"},{\"name\":\"thirdColor\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"third_color\"},{\"name\":\"bgPrimaryColor\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"bg_primary_color\"},{\"name\":\"bgSecondaryColor\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"bg_secondary_color\"},{\"name\":\"primaryFont\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"primary_font\"},{\"name\":\"socialMedia\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"social_media\"},{\"name\":\"seo\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"}],\"dbName\":\"office\"},\"Tour\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"numberOfDays\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"number_of_days\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"seo\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"isTicketIncluded\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_ticket_included\"},{\"name\":\"startDay\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"start_day\"},{\"name\":\"priceSingle\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"price_single\"},{\"name\":\"priceDouble\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"price_double\"},{\"name\":\"priceSingleSa\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"price_single_sa\"},{\"name\":\"priceDoubleSa\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"price_double_sa\"},{\"name\":\"priceSingleJo\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"price_single_jo\"},{\"name\":\"priceDoubleJo\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"price_double_jo\"},{\"name\":\"tourPrices\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"tour_prices\"},{\"name\":\"tourCountries\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tour_countries\"},{\"name\":\"tourHotels\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tour_hotels\"},{\"name\":\"tourIncludes\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"tour_includes\"},{\"name\":\"tourExcludes\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"tour_excludes\"},{\"name\":\"tourSections\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"tour_sections\"},{\"name\":\"airpotComing\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"airpot_coming\"},{\"name\":\"airpotGoing\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"airpot_going\"},{\"name\":\"additionalInfo\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"additional_Info\"},{\"name\":\"additionalService\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"additional_service\"},{\"name\":\"externalFile\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"external_file\"},{\"name\":\"typeId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"type_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"customers\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"CustomerToTour\"},{\"name\":\"tourType\",\"kind\":\"object\",\"type\":\"TourType\",\"relationName\":\"TourToTourType\"},{\"name\":\"locationTours\",\"kind\":\"object\",\"type\":\"LocationTour\",\"relationName\":\"LocationTourToTour\"}],\"dbName\":\"tour\"},\"TourType\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"showOnService\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"show_on_service\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"tours\",\"kind\":\"object\",\"type\":\"Tour\",\"relationName\":\"TourToTourType\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"tour_type\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"passkeys\",\"kind\":\"object\",\"type\":\"Passkey\",\"relationName\":\"PasskeyToUser\"}],\"dbName\":\"user\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"session\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"account\"},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification\"},\"Passkey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PasskeyToUser\"},{\"name\":\"credentialID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"counter\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"deviceType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"backedUp\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"transports\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"passkey\"},\"Setting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"section\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"setting\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

